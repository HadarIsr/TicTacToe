//
//  main.cpp
//  TicTacToe
//
//  Created by Hadar Israeli on 02/12/2018.
//  Copyright Â© 2018 Hadar Israeli. All rights reserved.
//Tic Tac Toe game



#include <iostream>
using namespace std;




const int SIZE=3;//size of the board 3*3
const int MAXTURN=9;//maximum number of turns

void nullBoard(char board[][SIZE]);
void printBoard(char board[][SIZE]);
int whoWins(char board[][SIZE]);
void mark(char board[][SIZE], int player,int row,int column);
bool cheakStatus(char board[][SIZE],int row,int column);
void insertValue (char board[][SIZE],int player);

void nullBoard(char board[][SIZE]){//reset the board
    
    for(int i=0;i<SIZE;i++)
        for(int j=0;j<SIZE;j++)
            board[i][j]=' ';
}

void printBoard(char board[][SIZE]){//print the board status
    cout<<"\t1\t2\t3\n";
    for(int i=0;i<SIZE;i++){
        cout<<char(i+65)<<"\t";
        for(int j=0;j<SIZE;j++)
            cout<<board[i][j]<<"\t";
        cout<<endl;
    }
}

int whoWins(char board[][SIZE]){//return if someone wins
    
    if((board[0][0]==board[0][1])&&(board[0][1]==board[0][2])){
        if (board[0][0]=='X')
            return 1;
        else if (board[0][0]=='O')
            return 2;
    }
    if((board[1][0]==board[1][1])&&(board[1][1]==board[1][2])){
        if (board[1][0]=='X')
            return 1;
        else if (board[1][0]=='O')
            return 2;
    }
    if((board[2][0]==board[2][1])&&(board[2][1]==board[2][2])){
        if (board[2][0]=='X')
            return 1;
        else if (board[2][0]=='O')
            return 2;
    }
    if((board[0][0]==board[1][0])&&(board[1][0]==board[2][0])){
        if (board[0][0]=='X')
            return 1;
        else if (board[0][0]=='O')
            return 2;
    }
    if((board[0][1]==board[1][1])&&(board[1][1]==board[2][1])){
        if (board[0][1]=='X')
            return 1;
        else if (board[0][1]=='O')
            return 2;
    }
    if((board[0][2]==board[1][2])&&(board[1][2]==board[2][2])){
        if (board[0][2]=='X')
            return 1;
        else if (board[0][2]=='O')
            return 2;
    }
    if((board[0][0]==board[1][1])&&(board[1][1]==board[2][2])){
        if (board[0][0]=='X')
            return 1;
        else if (board[0][0]=='O')
            return 2;
    }
    if((board[0][2]==board[1][1])&&(board[1][1]==board[2][0])){
        if (board[0][2]=='X')
            return 1;
        else if (board[0][2]=='O')
            return 2;
    }
    return 0;
}

void mark(char board[][SIZE], int player,int row,int column){//mark the place in player sign(X or O)
    if (player==1)
        board[row][column]='X';
    else
        board[row][column]='O';
}

bool cheakStatus(char board[][SIZE],int row,int column){//Checks if the input correct or available
    
    if((row>=0)&&(row<3)&&(column>=0)&&(column<3))
        if (board[row][column]==' ')
            return true;
        else
            cout<<"you have value here, please try again\n";
        else if ((row<0)||(row>=3))//eror in the row input
                cout<<"the row you entered is not A,B,C please try again(use in capital letter)\n";
    else if ((column<0)||(column>=3))//eror in the column input
        cout<<"the column you entered is not 1,2,3 please try again\n";
    
    return false;
}



void insertValue (char board[][SIZE],int player){//Takes a row and column from the user. Checks if the input is correct, if yes, updates the board                        else sends the user an appropriate message.

    char insert[2];//the input length is maximum 2
    cout<<"chose row(A-C) and column(1-3)\n";
    for(int i=0;i<2;i++)
        cin>>insert[i];
    while (!(cheakStatus(board, int(insert[0]-'A'), int(insert[1]-'1')))) {
        cout<<"chose row and column\n";
        for(int i=0;i<2;i++)
            cin>>insert[i];
    }
    mark(board,player, int(insert[0]-'A'), int(insert[1]-'1'));
    
    
}

int main() {
    
    int winner=0;
    char board [SIZE][SIZE];//set array board
    nullBoard(board);//reset the board
    printBoard(board);//print the board status
    
    for(int i=1;(i<=MAXTURN)&&(winner==0);i++) {
        if(i%2==1)//player one start
            cout<<"player one turn (X)\n";
        else
            cout<<"player two turn (O)\n";
        insertValue(board, i%2);
        printBoard(board);
        if(i>=5)//impossible to win before the fifth round.
            winner=whoWins(board);
    }
    
    if(winner!=0)
        cout<<"player "<<winner<<" is the winner\n";
    else
        cout<<"draw\n";
    
    return 0;
}
